package config

import (
	json "encoding/json"
	"fmt"
	"os"
	"strconv"

	"github.com/joho/godotenv"
)

// TODO
// Refactor to switch from Global variables to arguments
var ConfigValues Configs
var UserInputConfigValues UserInputConfigurations
var LogAmountSet int
var EnvVar map[string]string

type Configs struct {
	App struct {
		LogLevel  string `json:"LogLevel"`
		LogAmount string `json:"LogAmount"`
	} `json:"App"`
	WindowsEventLog struct {
		Enabled  bool     `json:"Enabled"`
		Channels []string `json:"Channels"`
		Query    string   `json:"Query"`
	} `json:"WindowsEventLog"`
}

type UserInputConfigurations struct {
	UseFS            bool
	UseDatabase      bool
	UseWindowsEvents bool
	UseAPI           bool
	UseMSVC          bool
	UseMockedLogs    bool
}

func Init() (Configs, UserInputConfigurations) {
	getDefaultConfig()
	getCustomConfig()
	printConfigs()
	return ConfigValues, UserInputConfigValues
}

// TODO
// Refactor to use configurable path or environment variable
func getDefaultConfig() {
	configFile, err := os.Open("internal/config/config.json")

	if err != nil {
		panic(`Error getting default configuration for TidyBeaver!!!
		TidyBeaver stopped working.`)
	}

	defer configFile.Close()
	decodedJson := json.NewDecoder(configFile)
	decodedJson.Decode(&ConfigValues)
	logAmount, _ := strconv.ParseInt(ConfigValues.App.LogAmount, 0, 0)
	LogAmountSet = int(logAmount)
}

func getCustomConfig() {
	fmt.Println("On this section, you will set which sources for logs you want to use. ")
	fmt.Println("Please, answer the question prompted to you with the letter Y for Yes or N for No ")

	fmt.Println("Do you want to use only logs generated by TidyBeaver? ")
	if !checkAnswer() {
		fmt.Println("Do you want to use every source available? ")
		if checkAnswer() {
			UserInputConfigValues.UseAPI = true
			UserInputConfigValues.UseDatabase = true
			UserInputConfigValues.UseFS = true
			UserInputConfigValues.UseMSVC = true
			UserInputConfigValues.UseWindowsEvents = true

		} else if !checkAnswer() {
			fmt.Println("Answer Y (Yes) or N (No) wether you'd like to use each source bellow:")

			fmt.Println("Local Folder? (C:Logs) ")
			UserInputConfigValues.UseFS = checkAnswer()

			fmt.Println("TidyBeaver's Postgres Database? ")
			UserInputConfigValues.UseDatabase = checkAnswer()

			fmt.Println("Windows Events? ")
			UserInputConfigValues.UseWindowsEvents = checkAnswer()

			fmt.Println("Mocked API? ")
			UserInputConfigValues.UseAPI = checkAnswer()

			fmt.Println("Mocked Microservice? ")
			UserInputConfigValues.UseMSVC = checkAnswer()
		}
	} else {
		UserInputConfigValues.UseMockedLogs = true
	}
}

// TODO
// Refactor to take out redundant check
func checkAnswer() bool {
	userInput := ""
	fmt.Scanln(&userInput)
	for userInput != "Y" && userInput != "N" {
		fmt.Println("Please enter a valid answer: Y for Yes or N for No ")
		fmt.Scanln(&userInput)
	}
	if userInput == "Y" || userInput == "y" {
		return true
	} else if userInput == "N" || userInput == "n" {
		return false
	}
	return false
}

func printConfigs() {

	err := godotenv.Load("T:/Repo/TidyBeaver/.env")
	if err != nil {
		fmt.Println("Error loading .env file")
	}

	EnvVar, err = godotenv.Read("T:/Repo/TidyBeaver/.env")

	if err != nil {
		fmt.Println("Error marshalling defaultConfig:", err)
		return
	}

	fmt.Println("Environment Variables: ")
	for val := range EnvVar {
		fmt.Println(val, ":", (os.Getenv(val)))
	}

	defaultConfigsJSON, err := json.MarshalIndent(ConfigValues, "", "  ")

	if err != nil {
		fmt.Println("Error marshalling defaultConfig:", err)
		return
	}

	fmt.Println("Configuration set: ", string(defaultConfigsJSON))
}
